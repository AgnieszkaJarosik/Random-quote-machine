{"version":3,"sources":["Fetch.js","Author/Author.js","QuotesText/QuotesText.js","Buttons/Button.js","Buttons/Link.js","App.js","serviceWorker.js","index.js"],"names":["Quotes","take","fetch","then","response","ok","json","Error","jsonResponse","quote","en","author","catch","e","message","Author","props","id","className","isHidden","QuotesText","text","Button","onClick","Link","href","link","target","App","state","backgroundColor","textColor","nr","isTextHidden","takeQuotes","bind","changeBg","this","setState","num","root","document","documentElement","Math","floor","random","length","style","setProperty","tweeter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2XAqBeA,EArBA,CACbC,KADa,WAIX,OAAOC,MAFE,8DAGNC,MAAO,SAAAC,GACN,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAMC,MAAM,sBAEXJ,MAAM,SAACK,GACR,MAAO,CACLC,MAAOD,EAAaE,GACpBC,OAAQH,EAAaG,WAG1BC,OAAM,SAAAC,GAAC,OAAIA,EAAEC,aCLLC,G,MARA,SAACC,GACZ,OACE,yBAAKC,GAAG,SAASC,UAAS,eAAUF,EAAMG,SAAW,UAAY,KAAjE,KACIH,EAAML,UCODS,G,MAVI,SAACJ,GAChB,OACE,yBAAKC,GAAG,OAAOC,UAAS,gBAAWF,EAAMG,SAAW,UAAY,KAC9D,uBAAGD,UAAU,eACbF,EAAMK,QCICC,G,KARA,SAACN,GACZ,OACE,4BAAQE,UAAU,SAASD,GAAID,EAAMC,GAAIM,QAASP,EAAMO,SACrDP,EAAMK,QCKAG,EARF,SAACR,GACV,OACE,uBAAGE,UAAU,SAASD,GAAID,EAAMC,GAAIQ,KAAMT,EAAMU,KAAMC,OAAO,UAC1DX,EAAMK,OCgEAO,G,wBA5Db,WAAaZ,GAAQ,IAAD,8BAClB,4CAAMA,KACDa,MAAQ,CACXpB,MAAO,GACPqB,gBAAiB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WACzEC,UAAW,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WACnEC,GAAI,EACJC,cAAc,GAGhB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAXE,E,iFAelBE,KAAKH,e,mCAGO,IAAD,OACXG,KAAKC,SAAS,CAAEL,cAAc,IAC9BI,KAAKD,WACLpC,EAAOC,OACNE,MAAM,SAAAM,GACL,EAAK6B,SAAU,CAAC7B,MAAOA,IACvB,EAAK6B,SAAS,CAAEL,cAAc,S,iCAKhC,IACIM,EADAC,EAAOC,SAASC,gBAGpB,GACEH,EAAMI,KAAKC,MAAMD,KAAKE,SAAWR,KAAKR,MAAMC,gBAAgBgB,cACtDP,IAAQF,KAAKR,MAAMG,IAE3BQ,EAAKO,MAAMC,YAAY,YAAaX,KAAKR,MAAMC,gBAAgBS,IAC/DC,EAAKO,MAAMC,YAAY,WAAYX,KAAKR,MAAME,UAAUQ,IAExDF,KAAKC,SAAS,CAACN,GAAIO,M,+BAInB,IAAMU,EAAU,uBAAG/B,UAAU,iBAE7B,OACE,yBAAKA,UAAU,OACb,yBAAMD,GAAG,aACP,kBAAC,EAAD,CAAYI,KAAMgB,KAAKR,MAAMpB,MAAMA,MAAOU,SAAUkB,KAAKR,MAAMI,eAC/D,kBAAC,EAAD,CAAQtB,OAAQ0B,KAAKR,MAAMpB,MAAME,OAAQQ,SAAUkB,KAAKR,MAAMI,eAC9D,yBAAKf,UAAU,WACb,kBAAC,EAAD,CAAMD,GAAG,cAAcI,KAAM4B,EAASvB,KAAK,6BAC3C,kBAAC,EAAD,CAAQT,GAAG,YAAYI,KAAK,YAAYE,QAASc,KAAKH,oB,GArDhDgB,IAAMC,YCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,MAAK,SAAA4D,GACjCA,EAAaC,kB","file":"static/js/main.c77aa02c.chunk.js","sourcesContent":["const Quotes = {\r\n  take () {\r\n    const url = `https://programming-quotes-api.herokuapp.com/quotes/random`;\r\n    \r\n    return fetch(url)\r\n      .then ( response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw Error('Request failed!');\r\n        }\r\n        }).then ((jsonResponse)=>{\r\n          return {\r\n            quote: jsonResponse.en,\r\n            author: jsonResponse.author\r\n          };\r\n        })\r\n      .catch(e => e.message)\r\n  }\r\n}\r\n    \r\nexport default Quotes;","import React from 'react';\r\n\r\nimport './Author.css';\r\n\r\nconst Author = (props) => {\r\n    return (\r\n      <div id=\"author\" className={`text ${props.isHidden ? \" hidden\" : \"\"}`}>\r\n       - {props.author}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Author;\r\n","import React from 'react';\r\n\r\nimport './QuotesText.css';\r\n\r\nconst QuotesText = (props) => {\r\n    return (\r\n      <div id=\"text\" className={`quote ${props.isHidden ? \" hidden\" : \"\"}`}>\r\n        <i className=\"icon-quote\"></i>\r\n       {props.text}\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default QuotesText;\r\n","import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = (props) => {\r\n    return (\r\n      <button className=\"button\" id={props.id} onClick={props.onClick} >\r\n        {props.text}\r\n      </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Link = (props) => {\r\n    return (\r\n      <a className=\"button\" id={props.id} href={props.link} target=\"_blank\" >\r\n        {props.text}\r\n      </a>\r\n    );\r\n}\r\n\r\nexport default Link;","import React from 'react';\nimport Quotes from './Fetch.js';\nimport Author from './Author/Author';\nimport QuotesText from './QuotesText/QuotesText';\nimport Button from './Buttons/Button';\nimport Link from './Buttons/Link';\n\nimport './App.css';\nimport './fontello/css/fontello.css';\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = { \n      quote: {},\n      backgroundColor: ['#dbc08a', '#c9a14f', '#c3963c', '#d6b676', '#cca353', '#c4963b'],\n      textColor: ['#433d3d', '#6b6161', '#867979', '#786d6d', '#5e5555', '#363030'],\n      nr: 1,\n      isTextHidden: false\n    };\n\n    this.takeQuotes = this.takeQuotes.bind(this);\n    this.changeBg = this.changeBg.bind(this);\n  }\n  \n  componentDidMount() {\n    this.takeQuotes();\n  }\n\n  takeQuotes() {\n    this.setState({ isTextHidden: true });\n    this.changeBg();\n    Quotes.take()\n    .then( quote => {\n      this.setState( {quote: quote} )\n      this.setState({ isTextHidden: false });\n    })\n  }\n\n  changeBg() {\n    let root = document.documentElement;\n    let num;\n\n    do {\n      num = Math.floor(Math.random() * this.state.backgroundColor.length);\n    } while(num === this.state.nr)\n    \n    root.style.setProperty('--bgColor', this.state.backgroundColor[num]);\n    root.style.setProperty('--tColor', this.state.textColor[num]);\n\n    this.setState({nr: num});\n  }\n\n  render () {\n    const tweeter = <i className='icon-twitter'></i>;\n  \n    return (\n      <div className=\"App\">\n        <div  id=\"quote-box\">\n          <QuotesText text={this.state.quote.quote} isHidden={this.state.isTextHidden} />\n          <Author author={this.state.quote.author} isHidden={this.state.isTextHidden} />\n          <div className=\"buttons\">\n            <Link id='tweet-quote' text={tweeter} link='twitter.com/intent/tweet' />\n            <Button id='new-quote' text='New Quote' onClick={this.takeQuotes} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}